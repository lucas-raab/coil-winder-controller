<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_fileReadWrite" Id="{672718a4-3f7c-4568-983a-5be17c81c63b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_fileReadWrite

VAR_INPUT
	bWrite			: BOOL := FALSE;(* Rising edge starts program execution *)
END_VAR

VAR
	
	sNetId			: T_AmsNetId := '';	(* TwinCAT system network address *)
	sFileRoot		: T_MaxString := 'C:\Users\nbung\Documents\TcXaeShell\CoilWindingMachine\CoilWindingHMI\LOG';
	sFilePath		: T_MaxString := '\';
	newsFilePath 	:  T_MaxString := '\';
	sFileName		: T_MaxString := '';(* CSV destination file path and name *) //to do probably should have a way for users to change this
	sCSVLine		: T_MaxString := '';(* Single CSV text line (row, record), we are using string as record buffer (your are able to see created fields) *)
	sCSVField		: T_MaxString := '';(* Single CSV field value (column, record field) *)
	bBusy			: BOOL;
	bError			: BOOL;
	nErrId			: UDINT;
	nRow	 		: UDINT 	:= 0;(* Row number (record) *)
	nColumn			: UDINT 	:= 0;(* Column number (record field) *)
	hFile			: UINT		:= 0;(* File handle of the source file *)
	step			: DWORD 	:= 0;
	stepCheck		: DWORD 	:= 0;
	stepDel: INT;
	fbTimer   : FB_LocalSystemTime := ( bEnable := TRUE, dwCycle := 1 );
	fbFileOpen		: FB_FileOpen;(* Opens file *)
	fbFileClose		: FB_FileClose;(* Closes file *)
	fbFilePuts		: FB_FilePuts;(* Writes one record (line) *)
	fbFileDelete	: FB_FileDelete;(* deletes a file*)
	fbWriter		: FB_CSVMemBufferWriter;(* Helper function block used to create CSV data bytes (single record line) *)
	bDone			: BOOL;
	bCheck          : BOOL;
	bValidPath		: BOOL;
	bDelete			: BOOL;
	database		: ARRAY[0..GVL.MAX_CSV_ROWS, 0..GVL.MAX_CSV_COLUMNS ] OF STRING(GVL.MAX_CSV_FIELD_LENGTH) :=[ 
	'User: ', 'TestUser',
	'Time Started: ', 'N/A', 
	'Time Completed: ', 'N/A',
	'Time Elapsed: ', 'N/A', 
	'Number OF coils: ', 'N/A',
	'Length of coil used: ', 'N/A',
	'User Note: ', 'This is a note from the user. should be last'];
	//system time
	
END_VAR

	]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="checkFile" Id="{10730966-3ca1-4b38-8b1e-b8f40c13e9c6}">
      <Declaration><![CDATA[METHOD checkFile : BOOL
VAR_INPUT
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE stepCheck OF
	//Waiting for rising edge of writeFile Variable. standby state
	0:
		IF bCheck  THEN
			bDone	:= FALSE;
			bCheck 	:= FALSE;
			bBusy 	:= TRUE;
			bError	:= FALSE;
			nErrId	:= 0;
			hFile	:= 0;
			nRow	:= 0;
			nColumn	:= 0;
			stepCheck 	:= 1;
			
		END_IF
		
	//open file
	1:
		fbFileOpen(bExecute:=FALSE);	
		fbFileOpen(bExecute:=TRUE,
					nmode:=FOPEN_MODEWRITE,
					sPathName:=sFileName,
					sNetId:='',
					tTimeout:=T#5S,); 
		
		stepCheck := 2;
		
		
	//wait untill we are finished opening the text file. 
	2:
		fbFileOpen( bExecute := FALSE, bError => bError, nErrID => nErrID, hFile => hFile );
		IF NOT fbFileOpen.bBusy THEN
			
			IF NOT fbFileOpen.bError THEN
				
				stepCheck := 100;
				bValidPath:=TRUE;
				bDelete :=TRUE;
				
				
			ELSE(* Error: could not create file *)
				stepCheck := 100;
				bValidPath:=FALSE;
				bError:=TRUE;
					
			END_IF
		END_IF

		
	//write single text line.
		10:
		fbFileClose( bExecute := FALSE );
		fbFileClose( sNetId := sNetId, hFile := hFile, bExecute := TRUE );
		stepCheck := 11;
	
	11:(* Wait until close not busy *)
		fbFileClose( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF ( NOT fbFileClose.bBusy ) THEN
			hFile := 0;
			stepCheck := 100;
		END_IF
	100: (* Error or ready step => cleanup *)
		
		IF ( hFile <> 0 ) THEN
			stepCheck := 10; (* Close the source file *)
		ELSE
			bBusy := FALSE;
			stepCheck := 0;	(* Ready *)
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="CYLIC" Id="{022d29b1-9207-44a1-a9b2-dae6b5311cdc}">
      <Declaration><![CDATA[METHOD CYLIC : BOOL
VAR_INPUT
END_VAR

VAR

t : DATE_AND_TIME ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fileWrite();
checkFile();
fileDelete();
fbTimer();


]]></ST>
      </Implementation>
    </Method>
    <Method Name="fileDelete" Id="{03752aa4-024a-406f-99e7-ee6c7aa679f0}">
      <Declaration><![CDATA[METHOD fileDelete : BOOL
VAR_INPUT
END_VAR

VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE stepDel OF
	//Waiting for rising edge of writeFile Variable. standby state
	0:
		IF bDelete AND NOT bBusy THEN
			bDone	:= FALSE;
			bDelete 	:= FALSE;
			bBusy 	:= TRUE;
			bError	:= FALSE;
			nErrId	:= 0;
			hFile	:= 0;
			
			stepDel 	:= 1;
		END_IF
		
	//open file
	1:
		fbFileDelete(bExecute:=FALSE);
			fbFileDelete(bExecute:=TRUE,	
						sPathName:=sFileName,
						sNetId:='',
						tTimeout:=T#5S,);
		stepDel := 2;
	//wait untill we are finished opening the text file. 
	2:
			fbFileDelete( bExecute := FALSE, bError => bError, nErrID => nErrID );
			IF NOT fbFileDelete.bBusy THEN
			
				IF NOT fbFileDelete.bError THEN
					bDone:=TRUE;
					stepDel :=100;
					
				ELSE(* Error: could not create file *)
				stepDel := 100;
				bValidPath:=FALSE;
				bError:=TRUE;
					
				END_IF
			END_IF
	
	10:
		fbFileClose( bExecute := FALSE );
		fbFileClose( sNetId := sNetId, hFile := hFile, bExecute := TRUE );
		stepDel := 11;
	
	11:(* Wait until close not busy *)
		fbFileClose( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF ( NOT fbFileClose.bBusy ) THEN
			hFile := 0;
			stepDel := 100;
		END_IF
		
	100: (* Error or ready step => cleanup *)
		bDone:=TRUE;
		IF ( hFile <> 0 ) THEN
			stepDel := 10; (* Close the source file *)
		ELSE
			bBusy := FALSE;
			stepDel := 0;	(* Ready *)
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="fileWrite" Id="{7c220b82-3fe5-4faa-8bdb-22d8eb65c323}">
      <Declaration><![CDATA[METHOD fileWrite : BOOL
VAR_INPUT
END_VAR

VAR
 tempString   : STRING;
 

 
 
 nDstsize : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE step OF
	//Waiting for rising edge of writeFile Variable. standby state
	0:
		IF bWrite AND bValidPath THEN
			bDone	:= FALSE;
			bWrite 	:= FALSE;
			bBusy 	:= TRUE;
			bError	:= FALSE;
			nErrId	:= 0;
			hFile	:= 0;
			nRow	:= 0;
			nColumn	:= 0;
			step 	:= 1;
		END_IF
		
	//open file
	1:
		
		tempString := CONCAT('LOG-',WORD_TO_STRING(fbTimer.systemTime.wYear) );
		tempString := CONCAT(tempString, '-');
		tempString := CONCAT(tempString, WORD_TO_STRING(fbTimer.systemTime.wMonth));
		tempString := CONCAT(tempString, '-');
		tempString := CONCAT(tempString, WORD_TO_STRING(fbTimer.systemTime.wDay));
		tempString := CONCAT(tempString, '-');
		tempString := CONCAT(tempString, WORD_TO_STRING(fbTimer.systemTime.wHour));
		tempString := CONCAT(tempString, '-');
		tempString := CONCAT(tempString, WORD_TO_STRING(fbTimer.systemTime.wMinute));
		sFileName := tempString;
		
	//	findAndReplace(pSrcString:=ADR(sFilePath),pDeleteString:=ADR('/'),pInsertString:=ADR('\'),pDstString:=ADR(newsFilePath),nDstsize:=255);
		newsFilePath := CONCAT(sFileRoot,sFilePath);
		newsFilePath := CONCAT(newsFilePath,'\');
		sFileName := CONCAT(newsFilePath, sFileName);
		
	
		fbFileOpen(bExecute:=FALSE);
		fbFileOpen( sNetId := sNetId,
					sPathName := sFileName, 
					nMode := FOPEN_MODEWRITE OR FOPEN_MODETEXT,(* Open file in TEXT mode! *)
					ePath := PATH_GENERIC,
					bExecute := TRUE );
		step := 2;
	//wait untill we are finished opening the text file. 
	2:
		fbFileOpen( bExecute := FALSE, bError => bError, nErrID => nErrID, hFile => hFile );
		IF NOT fbFileOpen.bBusy THEN
			IF NOT fbFileOpen.bError THEN
				step := 3;
			ELSE(* Error: file not found? *)
				step := 100;
			END_IF
		END_IF
	
	//write single text line.
	3:(* Convert one PLC record to CSV format *)
		sCSVLine := '';
		fbWriter.eCmd := eEnumCmd_First;(* Write first field value *)
		IF nRow <= GVL.MAX_CSV_ROWS THEN

			FOR nColumn := 0 TO GVL.MAX_CSV_COLUMNS BY 1 DO

				sCSVField := STRING_TO_CSVFIELD( database[ nRow, nColumn ], FALSE );(* TODO: Get field value from your application *)

				(* Add new field to the record buffer *)
				fbWriter( 	pBuffer := ADR( sCSVLine ), cbBuffer := SIZEOF( sCSVLine ) - 1, putValue := sCSVField, pValue := 0, cbValue := 0,
							bCRLF := ( nColumn = GVL.MAX_CSV_COLUMNS ) );(* bCRLF == TRUE => Write CRLF after the last field value *)
				IF fbWriter.bOk THEN
					fbWriter.eCmd := eEnumCmd_Next;(* Write next field value *)
				ELSE(* Error *)
					step := 100;
					RETURN;
				END_IF

			END_FOR(* FOR nColumn := 0... *)

			(* FB_FilePuts adds allready CR (carriage return) to the written line.
			We have to replace the $R$L characters with $L character to avoid double CR. *)
			IF RIGHT( sCSVLine, 2 ) = '$R$L' THEN
				sCSVLine := REPLACE( sCSVLine, '$L', 2, LEN( sCSVLine ) - 1 );
			END_IF

			nRow := nRow + 1;(* Increment number of created records (rows) *)
			step := 4;(* Write record to the file *)

		ELSE(* All rows written => Close file *)
			step := 10;
		END_IF

	4:	(* Write single text line *)
	
		fbFilePuts( bExecute := FALSE );
		fbFilePuts( sNetId := sNetId, hFile := hFile, sLine := sCSVLine, bExecute := TRUE );
		step := 5;
	
	//waits for the line of text to finish
	5:
		fbFilePuts( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF NOT fbFilePuts.bBusy THEN
			IF NOT fbFilePuts.bError THEN
				step := 3;(* Write next record *)
			ELSE(* Error *)
				step := 100;
			END_IF
		END_IF
		
	10:
		fbFileClose( bExecute := FALSE );
		fbFileClose( sNetId := sNetId, hFile := hFile, bExecute := TRUE );
		step := 11;
	
	11:(* Wait until close not busy *)
		fbFileClose( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF ( NOT fbFileClose.bBusy ) THEN
			hFile := 0;
			step := 100;
		END_IF
		
	100: (* Error or ready step => cleanup *)
		bDone:=TRUE;
		IF ( hFile <> 0 ) THEN
			step := 10; (* Close the source file *)
		ELSE
			bBusy := FALSE;
			step := 0;	(* Ready *)
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="update_database" Id="{822f2f6a-ee12-4586-a471-9c4d67af88e7}">
      <Declaration><![CDATA[METHOD update_database : BOOL
VAR_INPUT
	 
	user : STRING := 'N/A';
	timeStarted : TIME;
	timeCompleted : TIME;
	timeElasped : TIME;
	numOfCoil : INT :=0;
	lengthOCoil : INT :=0;
	userNote : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[database[ 0, 1 ]:=user; //user ID 
database[ 1, 1 ]:=WSTRING_TO_STRING(TIME_TO_WSTRING(timeStarted)); //TO DO this leaves a long in a vauge format. 
database[ 2, 1 ]:=WSTRING_TO_STRING(TIME_TO_WSTRING(timeCompleted));
database[ 3, 1 ]:=WSTRING_TO_STRING(TIME_TO_WSTRING(timeElasped));
database[ 4, 1 ]:=INT_TO_STRING(numOfCoil);
database[ 5, 1 ]:=INT_TO_STRING(lengthOCoil);
database[ 6, 1 ]:=userNote;





]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_fileReadWrite">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_fileReadWrite.checkFile">
      <LineId Id="140" Count="12" />
      <LineId Id="221" Count="0" />
      <LineId Id="153" Count="3" />
      <LineId Id="204" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="222" Count="3" />
      <LineId Id="212" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="226" Count="1" />
      <LineId Id="164" Count="1" />
      <LineId Id="228" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="168" Count="2" />
      <LineId Id="214" Count="0" />
      <LineId Id="216" Count="2" />
      <LineId Id="171" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="219" Count="1" />
      <LineId Id="173" Count="1" />
      <LineId Id="248" Count="1" />
      <LineId Id="176" Count="0" />
      <LineId Id="229" Count="9" />
      <LineId Id="177" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_fileReadWrite.CYLIC">
      <LineId Id="111" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="143" Count="0" />
      <LineId Id="145" Count="0" />
    </LineIds>
    <LineIds Name="FB_fileReadWrite.fileDelete">
      <LineId Id="30" Count="0" />
      <LineId Id="50" Count="9" />
      <LineId Id="61" Count="4" />
      <LineId Id="156" Count="3" />
      <LineId Id="71" Count="3" />
      <LineId Id="160" Count="12" />
      <LineId Id="82" Count="0" />
      <LineId Id="135" Count="20" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="FB_fileReadWrite.fileWrite">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="36" Count="7" />
      <LineId Id="11" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="142" Count="0" />
      <LineId Id="146" Count="9" />
      <LineId Id="163" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="143" Count="2" />
      <LineId Id="29" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="44" Count="3" />
      <LineId Id="34" Count="0" />
      <LineId Id="48" Count="8" />
      <LineId Id="30" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="98" Count="34" />
      <LineId Id="135" Count="0" />
      <LineId Id="133" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="6" />
      <LineId Id="64" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="76" Count="1" />
      <LineId Id="75" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="80" Count="3" />
      <LineId Id="78" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="88" Count="4" />
      <LineId Id="86" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_fileReadWrite.update_database">
      <LineId Id="5" Count="1" />
      <LineId Id="35" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="13" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>